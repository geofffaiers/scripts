#!/bin/bash

# gflow - Git Flow
# A comprehensive git workflow automation script
# Author: Geoff Faiers
# Version: 1.0

set -e  # Exit on any error

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Configuration
DEFAULT_MAIN_BRANCH="main"
PROTECTED_BRANCHES=("main" "master" "develop" "staging" "production")

# Helper functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check if we're in a git repository
check_git_repo() {
    if ! git rev-parse --git-dir > /dev/null 2>&1; then
        log_error "Not in a git repository!"
        exit 1
    fi
}

# Get the main branch name (main or master)
get_main_branch() {
    local main_branch
    if git show-ref --verify --quiet refs/heads/main; then
        main_branch="main"
    elif git show-ref --verify --quiet refs/heads/master; then
        main_branch="master"
    else
        log_warning "Neither 'main' nor 'master' branch found, using 'main'"
        main_branch="main"
    fi
    echo "$main_branch"
}

# Check if branch is protected
is_protected_branch() {
    local branch="$1"
    for protected in "${PROTECTED_BRANCHES[@]}"; do
        if [[ "$branch" == "$protected" ]]; then
            return 0
        fi
    done
    return 1
}

# Check if there are uncommitted changes
has_uncommitted_changes() {
    ! git diff --quiet || ! git diff --cached --quiet
}

# Check if there are untracked files
has_untracked_files() {
    [[ -n "$(git ls-files --others --exclude-standard)" ]]
}

# Safe stash that only stashes if there are changes
safe_stash() {
    if has_uncommitted_changes || has_untracked_files; then
        log_info "Stashing changes..."
        git stash push -u -m "gflow auto-stash $(date '+%Y-%m-%d %H:%M:%S')"
        echo "stashed"
    else
        log_info "No changes to stash"
        echo "none"
    fi
}

# Apply stash if it exists
safe_stash_pop() {
    local stash_status="$1"
    if [[ "$stash_status" == "stashed" ]]; then
        log_info "Applying stashed changes..."
        if git stash pop; then
            log_success "Stash applied successfully"
        else
            log_warning "Stash application had conflicts - please resolve manually"
        fi
    fi
}

# Check if branch exists locally
branch_exists_locally() {
    git show-ref --verify --quiet "refs/heads/$1"
}

# Check if branch exists on remote
branch_exists_remotely() {
    git ls-remote --heads origin "$1" | grep -q "$1"
}

# Get current branch name
get_current_branch() {
    git branch --show-current
}

# Fetch from origin
safe_fetch() {
    log_info "Fetching from origin..."
    if git fetch origin; then
        log_success "Fetch completed"
    else
        log_error "Failed to fetch from origin"
        exit 1
    fi
}

# Pull from branch with merge conflict detection
safe_pull() {
    local branch="$1"
    log_info "Pulling from origin/$branch..."
    if git pull origin "$branch"; then
        log_success "Pull completed successfully"
    else
        log_error "Pull failed - there may be conflicts to resolve"
        exit 1
    fi
}

# Checkout branch safely
safe_checkout() {
    local branch="$1"
    log_info "Checking out branch: $branch"
    if git checkout "$branch"; then
        log_success "Checked out $branch"
    else
        log_error "Failed to checkout $branch"
        exit 1
    fi
}

# Create and push new branch
create_and_push_branch() {
    local branch="$1"
    log_info "Creating new branch: $branch"
    if git checkout -b "$branch"; then
        log_success "Created branch $branch"
        log_info "Pushing branch to origin..."
        if git push -u origin "$branch"; then
            log_success "Branch pushed to origin"
        else
            log_error "Failed to push branch to origin"
            exit 1
        fi
    else
        log_error "Failed to create branch $branch"
        exit 1
    fi
}

# Merge branch with conflict detection
safe_merge() {
    local branch="$1"
    log_info "Merging $branch into current branch..."
    if git merge "$branch"; then
        log_success "Merge completed successfully"
    else
        log_error "Merge failed - there are conflicts to resolve"
        log_info "Run 'git status' to see conflicted files"
        log_info "After resolving conflicts, run 'git commit' to complete the merge"
        exit 1
    fi
}

# Push to current branch
safe_push() {
    local current_branch
    current_branch=$(get_current_branch)
    log_info "Pushing $current_branch to origin..."
    if git push origin "$current_branch"; then
        log_success "Push completed successfully"
    else
        log_error "Failed to push to origin"
        exit 1
    fi
}

# New branch workflow (-n)
new_branch_workflow() {
    local branch_name="$1"
    local main_branch
    local stash_status

    log_info "Starting new branch workflow for: $branch_name"

    # Validate branch name
    if [[ -z "$branch_name" ]]; then
        log_error "Branch name is required"
        exit 1
    fi

    if is_protected_branch "$branch_name"; then
        log_error "Cannot create branch with protected name: $branch_name"
        exit 1
    fi

    main_branch=$(get_main_branch)

    # Stash changes
    stash_status=$(safe_stash)

    # Fetch and pull main
    safe_fetch
    safe_checkout "$main_branch"
    safe_pull "$main_branch"

    # Handle branch creation/checkout
    if [[ "$branch_name" == "$main_branch" ]]; then
        log_info "Already on $main_branch branch"
    elif branch_exists_remotely "$branch_name"; then
        log_info "Branch exists on remote, checking out..."
        safe_checkout "$branch_name"
        safe_pull "$branch_name"
    else
        log_info "Branch doesn't exist on remote, creating new branch..."
        create_and_push_branch "$branch_name"
    fi

    # Apply stash
    safe_stash_pop "$stash_status"

    log_success "New branch workflow completed for: $branch_name"
}

# Merge main workflow (-m)
merge_main_workflow() {
    local branch_name="$1"
    local main_branch

    log_info "Starting merge main workflow for: $branch_name"

    # Validate branch name
    if [[ -z "$branch_name" ]]; then
        log_error "Branch name is required"
        exit 1
    fi

    if ! branch_exists_locally "$branch_name"; then
        log_error "Branch '$branch_name' does not exist locally"
        exit 1
    fi

    main_branch=$(get_main_branch)

    # Checkout and pull main
    safe_checkout "$main_branch"
    safe_pull "$main_branch"

    # Checkout target branch and merge main
    safe_checkout "$branch_name"
    safe_merge "$main_branch"

    # Push changes
    safe_push

    log_success "Merge main workflow completed for: $branch_name"
}

# Merge main with stash workflow (-ms)
merge_main_stash_workflow() {
    local branch_name="$1"
    local main_branch
    local stash_status

    log_info "Starting merge main with stash workflow for: $branch_name"

    # Validate branch name
    if [[ -z "$branch_name" ]]; then
        log_error "Branch name is required"
        exit 1
    fi

    if ! branch_exists_locally "$branch_name"; then
        log_error "Branch '$branch_name' does not exist locally"
        exit 1
    fi

    main_branch=$(get_main_branch)

    # Stash changes
    stash_status=$(safe_stash)

    # Fetch, checkout and pull main
    safe_fetch
    safe_checkout "$main_branch"
    safe_pull "$main_branch"

    # Checkout target branch and merge main
    safe_checkout "$branch_name"
    safe_merge "$main_branch"

    # Push changes
    safe_push

    # Apply stash
    safe_stash_pop "$stash_status"

    log_success "Merge main with stash workflow completed for: $branch_name"
}

# Clean/Reset workflow (-c)
clean_workflow() {
    log_warning "This will discard ALL uncommitted changes!"
    read -p "Are you sure? (y/N): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        log_info "Cleaning working directory..."
        git reset --hard HEAD
        git clean -fd
        log_success "Working directory cleaned"
    else
        log_info "Clean operation cancelled"
    fi
}
# Quick commit workflow (-q)
quick_commit_workflow() {
    local message="$1"
    local push_flag="$2"

    if [[ -z "$message" ]]; then
        log_error "Commit message is required"
        exit 1
    fi

    if ! has_uncommitted_changes && ! has_untracked_files; then
        log_warning "No changes to commit"
        return 0
    fi

    log_info "Adding all changes..."
    git add -A

    log_info "Committing with message: $message"
    if git commit -m "$message"; then
        log_success "Commit created successfully"

        if [[ "$push_flag" == "--push" || "$push_flag" == "-p" ]]; then
            safe_push
        fi
    else
        log_error "Commit failed"
        exit 1
    fi
}

# Show usage
show_usage() {
    cat << EOF
gflow - Git Flow v1.0
USAGE:
    gflow [OPTION] [BRANCH_NAME]
OPTIONS:
    -n, --new [BRANCH_NAME]       New branch workflow
                                  - Stash changes
                                  - Fetch and pull main
                                  - Create/checkout branch
                                  - Apply stash
    -m, --merge [BRANCH_NAME]     Merge main workflow
                                  - Checkout main and pull
                                  - Checkout branch
                                  - Merge main into branch
                                  - Push changes
    -ms, --merge-stash [BRANCH_NAME]  Merge main with stash workflow
                                      - Stash changes
                                      - Fetch and pull main
                                      - Checkout branch
                                      - Merge main into branch
                                      - Push changes
                                      - Apply stash
                                      
    -c, --clean                   Clean/reset workflow
                                  - Discard all uncommitted changes
                                  - Reset working directory to last commit
    -qc, --quick-commit [MESSAGE]  Quick --no-verify commit workflow
                                  - Commit all changes with provided message
                                  - Optionally push changes with --push or -p flag
    -h, --help                    Show this help message
EXAMPLES:
    gflow -n feature/user-auth      Create or checkout feature/user-auth branch
    gflow -m feature/user-auth      Merge main into feature/user-auth
    gflow -ms feature/user-auth     Merge main into feature/user-auth with stashing
EOF
}

# Main script logic
main() {
    # Check if we're in a git repository
    check_git_repo

    # Parse command line arguments
    case "${1:-}" in
        -n|--new)
            new_branch_workflow "$2"
            ;;
        -m|--merge)
            merge_main_workflow "$2"
            ;;
        -ms|--merge-stash)
            merge_main_stash_workflow "$2"
            ;;
        -h|--help|"")
            show_usage
            ;;
        *)
            log_error "Unknown option: $1"
            show_usage
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"
